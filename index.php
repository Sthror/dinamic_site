<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>

<body>
    <?php

    /*
Задание 1: разместить строчки кода ниже и вызвать в браузере ваш первый php-скрипт:
echo "Hello world!";
*/

    echo "Hello world!";

    /*
Задание 2: Повторить весь код из роликов раздела "Материалы на обучение"
*/

    //Изучение PHP для начинающих | Урок #3 - Пишем "Hello World!"

    echo "Hello World!<br />"; // вывод текста
    echo "Hello world!"; // вывод текста
    echo "русский текст"; // вывод текста



    //Изучение PHP для начинающих | Урок #4 - Комментарии в PHP

    echo "Hi!"; // Эта строчка выводит Hi!
    /*
        комментарий №1
        комментарий №2
        комментарий №3
    */
    echo "Hi!"; # Эта строчка выводит Hi!


    //Изучение PHP для начинающих | Урок #5 - Переменные и их типы

    $myNumber = 45; // переменная с типом данных "целое число"
    $float = -3.25; // переменная с типом данных "число с плавающей точкой"
    $string = "Hello world!"; // переменная с типом данных "строка"
    $bool = true; // переменная с типом данных "булево значение"

    echo "переменная myNumber - $myNumber"; // вывод переменной
    echo "<br />"; // выводим тег переноса каретки
    echo "переменная float - $float"; // вывод переменной
    echo "<br />"; // выводим тег переноса каретки
    echo "переменная string - $string"; // вывод переменной
    echo "<br />"; // выводим тег переноса каретки
    echo "переменная bool - $bool"; // вывод переменной
    echo "<br />"; // выводим тег переноса каретки
    $myNumber = 12; // меняем значение переменной
    echo "переменная myNumber - $myNumber"; // вывод переменной



    //Изучение PHP для начинающих | Урок #6 - Константы

    echo PHP_VERSION; // выводим константу PHP_VERSION
    define("PI", 3.14); // создаем новую константу PI
    echo "<br />"; // выводим тег переноса каретки
    echo PI; // выводим константу PI
    echo "<br />"; // выводим тег переноса каретки
    echo defined("PI"); // проверяем существование константы




    //Изучение PHP для начинающих | Урок #7 - Арифметические операции

    $x = 32; // создаем переменную $x
    $y = 22.13; // создаем переменную $y
    $summ = $x + $y; // операция сложения
    $diff = $x - $y; // операция вычитания
    $mult = $x * $y; // операция умножения
    $dil = $x / $y; // операция деления

    echo "Сумма из $x и $y = $summ<br />"; // выводим результат операции
    echo "Разница из $x и $y = $diff<br />"; // выводим результат операции
    echo "Умножение из $x и $y = $mult<br />"; // выводим результат операции
    echo "Деление из $x и $y = $dil<br />"; // выводим результат операции

    $z = 12; // создаем переменную $z
    $ostatok = $x % $z; // создаем переменную $ostatok? кладем в значение остаток от деления переменных

    echo "Остаток при делении из $x и $z = $ostatok<br />"; // выводим результат операции

    $q = 400; // создаем переменную $q
    $q /= 10; // создаем переменную $q, делим эту же переменную на 10
    echo $q; // выводим значение переменной
    echo "<br />"; // выводим тег переноса каретки
    $q = $q + 1; //увеличиваем эту же переменную на 1
    $q += 1; //увеличиваем эту же переменную на 1
    $q++; //увеличиваем эту же переменную на 1
    $q--; //уменьшаем эту же переменную на 1
    echo $q; // выводим значение переменной



    //Изучение PHP для начинающих | Урок #8 - Строковые операции

    $str_1 = "<b>Первая строка</b> <input type=\"text\" />"; // объявляем переменную $str_1
    $str_2 = "<i>Вторая строка</i>"; // объявляем переменную $str_2

    echo $str_1 . " " . $str_2 . " \" \\"; // выводим конкатенацию переменных $str_1 и $str_2, разделяем их пробелом, в конце добавляем двойные кавычки и обратный слеш,

    echo ' \' '; // выводим одинарную кавычку



    //Изучение PHP для начинающих | Урок #9 - Логические операции

    $x = 12; // создаем переменную $x
    $y = 34; // создаем переменную $y 
    $z = 4.25; // создаем переменную $z 

    $bool_1 = $x != $z; // переменная с типом данных "булево значение", истина
    $bool_2 = $x <= $y; // переменная с типом данных "булево значение", истина 

    echo $bool_1 . "<br />" . $bool_2 . "<hr />"; // выводим значений переменных

    $bool_3 = !($x == $y); // переменная с типом данных "булево значение", истина
    $bool_4 = $x == $y || $z < $y; // переменная с типом данных "булево значение", истина
    $bool_5 = $z != $y && $x < $y; // переменная с типом данных "булево значение", истина
    $bool_6 = $z != $x ^ $y < $z; // переменная с типом данных "булево значение", истина

    echo "<br />" . $bool_3 . "<br />" . $bool_4 . "<br />" . $bool_5 . "<br />" . $bool_6; // выводим значений переменных    

    $bool = !($x != $y && $z < $x) || $x != $y; // переменная с типом данных "булево значение", истина

    echo "<br/>$bool = !($x != $y && $z < $x) || $x != $y"; // выводим значение переменных



    //Изучение PHP для начинающих | Урок #10 - Оператор эквивалентности

    $string = "Example"; // объявляем переменную
    $num = 0; // объявляем переменную

    $bool_1 = $string == true; // объявляем переменную
    echo "$bool_1 = $string == true;"; // выводим значение переменных

    $bool_2 = $num == ""; // объявляем переменную
    echo "$bool_2 = $num == \"\";<hr/>"; // выводим значение переменных

    $bool_3 = $string === true; // объявляем переменную
    echo "$bool_3 = $string === true;"; // выводим значение переменных

    $bool_4 = $num === ""; // объявляем переменную
    echo "$bool_2 = $num === \"\";"; // выводим значение переменных



    //Изучение PHP для начинающих | Урок #11 - Условные операторы

    $x = 12; // создаем переменную $x
    $y = 34; // создаем переменную $y 

    if ($x == $y && $x != 12 && $y == 5 && ($x + 5) == 15) // условие
        echo 'Ура!'; // выводим результат
    else if ($x == 15 || $y != 7) { // если первое условие ложно
        $num = 5;
        echo  "Число № " . $num; // выводим результат
    } else { // если все вышестоящие условия ложны
        echo "<br/>"; // выводим тег переноса каретки
        echo 'Все сработало!'; // выводим результат
    }

    if ($x == $y && $x != 12 && $y == 5 && ($x + 5) == 15) // условие без вариантов
        echo 'Ура!'; // выводим результат

    $x == $y ? $string = "Да" : $string = "Нет"; // краткая запись условия if...else...
    echo "<br/>" . $string; // выводим результат



    //Изучение PHP для начинающих | Урок #13 - Циклы For, While и Do While

    for ($i = 100; $i >= 80; $i -= 2) { // цикл от 100 до 81, шагом в 2
        if ($i % 5 == 0) continue; // если делится на 5 без остатка продолжить цикл не выполняя текущую итерацию
        if ($i <= 87) break; // если меньше или равно 87 полностью остановить цикл, текущая итерация не выполнится
        echo "Цикл под номером № $i<br/>"; // выводим результат 
    }

    echo "<br/>"; // выводим тег переноса каретки
    $x = 1; // создаем переменную $x

    while ($x <= 10) { // цикл, пока $x меньше или равен 10
        echo "Итерация под номером № $x<br/>"; // выводим результат 
        if ($x == 7) // условие $x равен 7 ?
            for ($y = 0; $y < 5; $y += 3) // цикл от 0 до 4 шагом 3
                echo "Еще одна итерация - $y<br/>";  // выводим результат           
        $x++; // прибавляем на 1
    }

    $z = 10; // создаем переменную $z
    echo "<br/>"; // выводим тег переноса каретки

    do { // сделать до тех пор пока условие ниже не будет ложно
        echo "Операция выполнилась только один раз"; // выводим результат 
        $z++; // прибавляем на 1
    } while ($z < 5); // условие для скрипта выше, если ложно скрипт выполнится только один раз



    /*
Задание 3: Задачи на написания линейных алгоритмов. Необходимо сделать/нарисовать сначала блок-схему, затем воспроизвести блок-схему в коде на php.
3a. Посчитать и вывести на экран чему равен периметр четырехугольника. Дано сторона a=5, сторона b=3, сторона c=5, сторона d=11.
*/

    $a = 5; // сторона a
    $b = 3;  // сторона b
    $c = 5;  // сторона c
    $d = 1; // сторона d
    $perimetr =  $a + $b + $c + $d; // высчитываю периметр      
    echo "<p>Периметр равен $perimetr !</p>"; // вывожу результат


    /*
3b. посчитать и вывести на экран значение S. Дано S = (a + b)^2, a = 7x, b=21x, x = ½
*/

    $x = 0.5;  // переменная x
    $a = 7 * $x; //переменная a
    $b = 21 * $x;  //переменная b

    $val = ($a + $b) * ($a + $b); // высчитываем значение
    echo "<p>S равно $val !</p>"; // вывожу результат


    /*
Задание 4: Задачи на написание вариативных алгоритмов (if...else)
4a. Посчитать площадь трапеции если переменная $Why заданная пользователем в начале сценария истина и периметр трапеции если эта переменная ложь. Значения необходимые для расчета площади и периметра задайте самостоятельно.
*/

    $Why = true; // переменная для расчета
    $a = 5; // сторона a
    $b = 7;  // сторона b
    $c = 3;  // сторона c
    $d = 3; // сторона d
    $m = 3; // высота
    $h = 3; // средняя линия

    if ($Why == true) {
        $S = $m * $h; // высчитываю площадь
        echo "Площадь трапеции равна $S"; // вывожу результат

    } else {
        $perimetr =  $a + $b + $c + $d; // высчитываю периметр      
        echo "<p>Периметр равен $perimetr !</p>"; // вывожу результат
    }


    /*
4b. Доработать предыдущую задачу добавив проверку корректности вводимых данных пользователем. Если данные введены некорректно, то сообщить об этом и не производить расчеты.
Подсказка: для проверки корректности вводимых данных, рекомендуется сравнить введенное значение и вычисленное значение высоты.
*/

    $Why = true; // переменная для расчета
    $a = 5; // сторона a
    $b = 7;  // сторона b
    $c = 3;  // сторона c
    $d = 3; // сторона d
    $m = 3; // высота
    $h = 3; // средняя линия

    if ($Why == true && $m != false && $h != false) { // проверка на пустое значение, так же можно проверить на тип данных "число", но в рамках этого занятия пока не возможно, в материалах этого не указано
        $S = $m * $h; // высчитываю площадь
        echo "Площадь трапеции равна $S"; // вывожу результат

    } else if ($Why == false && $a != false && $b != false && $c != false && $d != false) { // проверка на пустое значение, так же можно проверить на тип данных "число", но в рамках этого занятия пока не возможно, в материалах этого не указано
        $perimetr =  $a + $b + $c + $d; // высчитываю периметр      
        echo "<p>Периметр равен $perimetr !</p>"; // вывожу результат
    }



    /*
Задание 5: Задачи на написание алгоритмов с циклами (for, while)
5a. В задаче будем использовать функцию rand() она из заданного диапазона значений выбирает одно случайное.
Необходимо определить пессимист компьютер или оптимист.
Пусть $computer = rand(0,1). Если $computer выбирает 0, то он пессимист, если выбирает 1, то он оптимист.
Выполнить опрос компьютера 100 раз и вывести на экран по итогу всех этих итераций вывод - пессимист этот компьютер сегодня/сейчас или оптимист.
Подсказка: не нужно выводить 100 раз пессимист/оптимист, а нужен итог с цифрами, типа на 55% оптимист.
*/

    $cont = 100; // 100% оптимист ))
    for ($i = 1; $i < 100; $i++) { // счетчик 100 итераций
        $computer = rand(0, 1); // рандомное число
        if ($computer == 0) { // если компьютер в этот раз пессимист
            $cont--;  // убавляем пессимизм на 1 %  
        }
    }

    if ($cont > 50) { //если все же более половины случаев выпала 1
        echo "наш компьютер оптимист на $cont%"; // выводим кол-во оптимизма
    } else if ($cont == 50) { // если 0 выпал столько же сколько и 1
        echo "наш компьютер не определился"; // комп играет в русскую рулетку
    } else { // если 0 выпал больше чем 1
        $cont = 100 - $cont; // высчитываем кол-во пессимизма
        echo "наш компьютер пессимист на $cont%"; // выводим
    }


    /*
5b. В переменной $password хранится шестизначный пароль, состоящий только из цифр, например 302390.
Необходимо написать программу которая методом перебора найдет пароль.
Подсказка: 012345 - тоже вариант пароля.
*/
    $password = '000110';
    for ($i_6 = 0; $i_6 < 10; $i_6++) {
        for ($i_5 = 0; $i_5 < 10; $i_5++) {
            for ($i_4 = 0; $i_4 < 10; $i_4++) {
                for ($i_3 = 0; $i_3 < 10; $i_3++) {
                    for ($i_2 = 0; $i_2 < 10; $i_2++) {
                        for ($i = 0; $i < 10; $i++) {
                            $hack_pass = $i_6 . $i_5 . $i_4 . $i_3 . $i_2 . $i;
                            if ($hack_pass == $password) {
                                echo "Взломали пароль - это: $hack_pass";
                                break;
                            }
                        }
                    }
                }
            }
        }
    }


    /*
5c. В переменных $pass1 и $pass2 хранятся трехзначные пароли.
Мы уже подобрали пароль $pass1, например он равен 436.
Пароль $pass2 удалось получить только в зашифрованном виде $pass2Se.
Мы узнали что шифр был сделан по следующему правилу - если "вторая цифра из $pass1" больше 5, то $pass2 = "цифра первого разряда из $pass2Se" . "число второго разряда из $pass2Se" . "число третьего разряда из $pass2Se", а если "второе число из $pass1" меньше либо равно 5, то $pass2 = "цифра второго разряда из $pass2Se" . "цифра третьего разряда из $pass2Se" . "цифра первого разряда из $pass2Se".
Вывести на экран $pass2 и описание правила по которому этот пароль был расшифрован из $pass2Se.
Значение для переменной $pass2Se задайте на своё усмотрение.
*/

    $pass1 = 436; // первая переменная 
    $pass2Se = 456; // вторая (неизвестная) переменная
    $key = (($pass2Se % 100) - ($pass2Se % 10)) / 10; // второй разряд pass1
    $razryad_1 = $pass2Se % 10; // первый разряд
    $razryad_2 = (($pass2Se % 100) - ($pass2Se % 10)) / 10; // второй разряд
    $razryad_3 = $pass2Se - ($pass2Se % 100) / 100; // третий разряд
    if ($key > 5) { // если второй разряд больше 5
        $pass2 = $razryad_1 . $razryad_2 . $razryad_3; // получаем пароль
    } else { // в иных случаях
        $pass2 = $razryad_2 . $razryad_3 . $razryad_1; // получаем пароль
    }


    /*
5d. Для предыдущей задачи написать алгоритм шифрования пароля $pass2
*/

    $pass2 = 456;
    $razryad_1 = $pass2 % 10; // первый разряд
    $razryad_2 = (($pass2 % 100) - ($pass2 % 10)) / 10; // второй разряд
    $razryad_3 = $pass2 - ($pass2 % 100) / 100; // третий разряд

    if ($key > 5) { // если второй разряд больше 5
        $pass2Se = $razryad_1 . $razryad_2 . $razryad_3; // шифруем
    } else { // если третий разряд меньше 5 и  второй разряд меньше пяти
        $pass2Se = $razryad_2 . $razryad_3 . $razryad_1; // шифруем
    }



    /*
Задание 6: Задачи на выбор типов данных
6a. Даны два одноразрядных числа заданных с помощью слов (например $a='семь' и b='четыре').
Вывести на экран, в виде числа, результат сложения этих цифр.
Проверить результат сложения на разрядность, если разрядность больше 1, то вывести сообщение "большое число", иначе вывести сообщение "маленькое число".
*/

    $a = 'семь'; // задаем $a
    $b = 'четыре'; // задаем $b

    if ($a == 'один') { // изменяем тип данных на число
        $a = 1;
    } else if ($a == 'два') {
        $a = 2;
    } else if ($a == 'три') {
        $a = 3;
    } else if ($a == 'четыре') {
        $a = 4;
    } else if ($a == 'пять') {
        $a = 5;
    } else if ($a == 'шесть') {
        $a = 6;
    } else if ($a == 'семь') {
        $a = 7;
    } else if ($a == 'восемь') {
        $a = 8;
    } else if ($a == 'девять') {
        $a = 9;
    }

    if ($b == 'один') { // изменяем тип данных на число
        $b = 1;
    } else if ($b == 'два') {
        $b = 2;
    } else if ($b == 'три') {
        $b = 3;
    } else if ($b == 'четыре') {
        $b = 4;
    } else if ($b == 'пять') {
        $b = 5;
    } else if ($b == 'шесть') {
        $b = 6;
    } else if ($b == 'семь') {
        $b = 7;
    } else if ($b == 'восемь') {
        $b = 8;
    } else if ($b == 'девять') {
        $b = 9;
    }

    $sum =  $b +  $a; // сумма

    if ($sum < 10) { // сумма одноразрядное
        echo "$sum - маленькое число";
    } else { // если нет
        echo "$sum - большое число";
    }



    /*
6b. Предположим у нас в программе цены хранятся в виде целых чисел, но фактически - два последних разряда числа обозначают копейки.
Например, цена товара хранится в виде 10050, это значит что товар стоит 100 рублей 50 копеек.
Написать программу которая выведет на экран цену в двух форматах "N рубл[ей/я] M копе[ек/ки]." и "N.M руб." увеличив при этом цену товара на 13 процентов.
В программе использовать оператор % ($a % $b - целочисленный остаток от деления $a на $b).
*/

    $price = 101060; // переменная, клоторая хранит  цену
    $val = ($price) * 0.13 + $price; // увеличиваем сумму на 13 %
    if (($val * 10) % 10 !== 0) { // если есть дробное число
        $val1 = $val * 10000 % 10000; // получаем значение после ","
        $val2 = (($val * 10000 - $val1) / 10000) + 1;  // округляем в большую сторону     
    }

    $kopeiki = $val2 % 100; // получаем копейки
    $rubli = ($val2 - $kopeiki) / 100; // получаем рубли

    if ($rubli % 10 == 1) { // меняем название
        $rub = 'рубль';
    } else if (($rubli % 10 == 2 || $rubli % 10 == 3 || $rubli % 10 == 4) && !($rubli % 100 < 21 || $rubli % 100 > 11)) {
        $rub = 'рубля';
    } else {
        $rub = 'рублей';
    }

    if ($kopeiki % 10 == 1) {
        $kop = 'копейка';
    } else if ($kopeiki % 10 == 2 || $kopeiki % 10 == 3 || $kopeiki % 10 == 4) {
        $kop = 'копейки';
    } else {
        $kop = 'копеек';
    }

    echo "$rubli $rub $kopeiki $kop. <br>"; // выводим цену
    echo "$rubli.$kopeiki руб."; // выводим цену


    /*
6c. Как известно, при переводе IP-адреса компьютера в число, мы экономим ресурсы памяти, так как IP-адрес в четвертой версии — это 32-х битовое число и запись в строчном виде 192.168.1.1 будет занимать 15 байт, а в числовом виде всего 4 байта.
При этом удобной формой записи является запись в виде четырёх десятичных чисел значением от 0 до 255, разделённых точками, например, 192.0.2.60. но для хранения его в базе данных лучше перевести его в десятичное целое число.
Например 192.168.1.1 — это одно и то же, что 3232235777.
Алгоритм перевода строковой записи IP4 в числовую такой X = Y1 * 256 ^ 0 + Y2 * 256 ^ 1 + Y3 * 256 ^ 2 + Y4 * 256 ^3 (где ip адрес имеет формат Y4.Y3.Y2.Y1) Написать перевести алгоритм в php-код.
Пользователь программы вводит на входе $IP = '123.123.123.123' или $IP = 3232235777, программа должна определить какого вида IP ввел пользователь и показать альтернативную запись.
Для обработки адреса с "точкой" использовать функцию substr() - возвращает подстроку строки string длиной length, начинающегося с start символа по счету)
*/

    $IP = '192.168.1.1';

    $itaration = true;
    $i = 0;
    $part = "";
    $decodeIP = 0;
    $x = 3;
    if (substr($IP, 3, 1) !== '.') {
        $IP4 = true;
        echo "уже переведено";
    }
    while ($itaration && !$IP4) {
        if ($x == 3) {
            $multi = 256 * 256 * 256;
        } else if ($x == 2) {
            $multi = 256 * 256;
        } else if ($x == 1) {
            $multi = 256;
        } else {
            $multi = 1;
        }
        $simbol = substr($IP, $i, 1);
        if ($simbol != '.') {
            $part .= $simbol;
        } else {
            $decodeIP += $part * $multi;
            $x--;
            $part = '';
        }
        if (!$simbol) {
            $itaration = false;
        }
        $i++;
    }
    echo "<br>$decodeIP<br>";


    ?>

</body>

</html>